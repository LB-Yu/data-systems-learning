# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{
  # Generated parser implementation package and class name.
  package: "org.apache.calcite.sql.parser.impl",
  class: "CustomSqlParserImpl",

  # List of additional classes and packages to import.
  # Example. "org.apache.calcite.sql.*", "java.util.List".
  # Please keep the import classes in alphabetical order if new class is added.
  imports: [
    "org.apache.calcite.sql.SqlSubmit"
    "org.apache.calcite.schema.ColumnStrategy"
    "org.apache.calcite.sql.SqlCreate"
    "org.apache.calcite.sql.SqlDrop"
    "org.apache.calcite.sql.ddl.SqlDdlNodes"
    "org.apache.calcite.example.parser.ddl.SqlCreateTable"
    "org.apache.calcite.example.parser.ddl.SqlTableOption"
    "java.util.Map"
    "java.util.HashMap"
  ]

  # List of new keywords. Example: "DATABASES", "TABLES". If the keyword is not a reserved
  # keyword, please also add it to 'nonReservedKeywords' section.
  # Please keep the keyword in alphabetical order if new keyword is added.
  keywords: [
    "IF"
    "MATERIALIZED"
    "STORED"
    "VIRTUAL"
    "JAR"
    "FILE"
    "ARCHIVE"
    "SUBMIT"
    "JOB"
  ]

  # List of keywords from "keywords" section that are not reserved.
  nonReservedKeywords: [
    "SUBMIT"
    "JOB"
  ]

  # List of non-reserved keywords to add;
  # items in this list become non-reserved.
  # Please keep the keyword in alphabetical order if new keyword is added.
  nonReservedKeywordsToAdd: [
    # not in core, added in server
    "IF"
    "MATERIALIZED"
    "STORED"
    "VIRTUAL"
    "JAR"
    "FILE"
    "ARCHIVE"
  ]

  # List of non-reserved keywords to remove;
  # items in this list become reserved
  nonReservedKeywordsToRemove: [
  ]

  # List of methods for parsing custom SQL statements.
  # Return type of method implementation should be 'SqlNode'.
  # Example: SqlShowDatabases(), SqlShowTables().
  statementParserMethods: [
    "SqlSubmit()"
  ]

  # List of methods for parsing custom literals.
  # Return type of method implementation should be "SqlNode".
  # Example: ParseJsonLiteral().
  literalParserMethods: [
  ]

  # List of methods for parsing ddl supported data types.
  # Return type of method implementation should be "SqlTypeNameSpec".
  # Example: SqlParseTimeStampZ().
  dataTypeParserMethods: [
  ]

  # List of methods for parsing builtin function calls.
  # Return type of method implementation should be "SqlNode".
  # Example: DateFunctionCall().
  builtinFunctionCallMethods: [
  ]

  # List of methods for parsing extensions to "ALTER <scope>" calls.
  # Each must accept arguments "(SqlParserPos pos, String scope)".
  # Example: "SqlUploadJarNode"
  alterStatementParserMethods: [
  ]

  # List of methods for parsing extensions to "CREATE [OR REPLACE]" calls.
  # Each must accept arguments "(SqlParserPos pos, boolean replace)".
  createStatementParserMethods: [
    "SqlCreateForeignSchema"
    "SqlCreateMaterializedView"
    "SqlCreateSchema"
    "SqlCreateTable"
    "SqlCreateType"
    "SqlCreateView"
    "SqlCreateFunction"
  ]

  # List of methods for parsing extensions to "DROP" calls.
  # Each must accept arguments "(Span s)".
  dropStatementParserMethods: [
    "SqlDropMaterializedView"
    "SqlDropSchema"
    "SqlDropTable"
    "SqlDropType"
    "SqlDropView"
    "SqlDropFunction"
  ]

  # Binary operators tokens
  binaryOperatorsTokens: [
  ]

  # Binary operators initialization
  extraBinaryExpressions: [
  ]

  # List of files in @includes directory that have parser method
  # implementations for parsing custom SQL statements, literals or types
  # given as part of "statementParserMethods", "literalParserMethods" or
  # "dataTypeParserMethods".
  implementationFiles: [
    "parserImpls.ftl"
  ]

  # List of additional join types. Each is a method with no arguments.
  # Example: LeftSemiJoin()
  joinTypes: [
  ]

  includePosixOperators: false
  includeCompoundIdentifier: true
  includeBraces: true
  includeAdditionalDeclarations: false
}
